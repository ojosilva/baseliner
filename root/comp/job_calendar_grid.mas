(function(){
	var store=new Ext.data.JsonStore({
		root: 'cat' , 
		remoteSort: true,
		totalProperty:"totalCount", 
		id: 'rownum', 
		url: '/job/calendar_list_json',
		fields: [ 
			{  name: 'id' },
			{  name: 'name' },
			{  name: 'description' },
			{  name: 'bl' },
			{  name: 'ns' },
			{  name: 'ns_desc' }
		]
	});

	Ext.app.SearchField = Ext.extend(Ext.form.TwinTriggerField, {
		initComponent : function(){
			Ext.app.SearchField.superclass.initComponent.call(this);
			this.on('specialkey', function(f, e){
				if(e.getKey() == e.ENTER){
					this.onTrigger2Click();
				}
			}, this);
		},

		validationEvent:false,
		validateOnBlur:false,
		trigger1Class:'x-form-clear-trigger',
		trigger2Class:'x-form-search-trigger',
		hideTrigger1:true,
		width:280,
		hasSearch : false,
		paramName : 'query',

		onTrigger1Click : function(){
			if(this.hasSearch){
				this.el.dom.value = '';
				var o = {start: 0};
				this.store.baseParams = this.store.baseParams || {};
				this.store.baseParams[this.paramName] = '';
				this.store.reload({params:o});
				this.triggers[0].hide();
				this.hasSearch = false;
			}
		},

		onTrigger2Click : function(){
			var v = this.getRawValue();
			if(v.length < 1){ //>
				this.onTrigger1Click();
				return;
			}
			var o = {start: 0};
			this.store.baseParams = this.store.baseParams || {};
			this.store.baseParams[this.paramName] = v;
			this.store.reload({params:o});
			this.hasSearch = true;
			this.triggers[0].show();
		}
	});

	var addNewTabComp = function( purl, ptitle ){
		var myTabPanel = Ext.getCmp('main-panel');
		Ext.Ajax.request({
			url: purl,
			success: function(xhr) {
				var comp = eval(xhr.responseText);
				var tab = comp.add(newComponent);
				tab.title( ptitle );
				comp.setActiveTab(newComponent);
			},
			failure: function(xhr) {
				var win = new Ext.Window({ layout: 'fit', 
					autoScroll: true, title: ptitle+' create failed', 
					height: 600, width: 600, 
					html: 'Server communication failure:' + xhr.responseText });
				win.show();
			}
		});
	};

	// Después de que cargue la página:
		var ps = 15; //page_size
		store.load({params:{start:0 , limit: ps}}); //, {{fid: '<% 1 %>' , par1: '<% 2 %>', cam: '<% 3 %>', filtro: 'ALL' }});

		// create the grid
		var grid = new Ext.grid.GridPanel({
			renderTo: 'main-panel',
			title: '<% _loc('Job Calendars') %>',
			header: false,
            stripeRows: true,
			autoScroll: true,
			autoWidth: true,
			store: store,
			viewConfig: [{
					forceFit: true
			}],
			selModel: new Ext.grid.RowSelectionModel({singleSelect:true}),
			loadMask:'true',
			columns: [
				{ header: '<% _loc('Calendar') %>', width: 200, dataIndex: 'name', sortable: true },	
				{ header: '<% _loc('Description') %>', width: 200, dataIndex: 'description', sortable: true },	
				{ header: '<% _loc('Baseline') %>', width: 100, dataIndex: 'bl', sortable: true },	
				{ header: '<% _loc('Namespace') %>', width: 150, dataIndex: 'ns', sortable: true },	
				{ header: '<% _loc('Namespace Description') %>', width: 200, dataIndex: 'ns_desc', sortable: true }	
			],
			autoSizeColumns: true,
			deferredRender:true,
			bbar: new Ext.PagingToolbar({
								store: store,
								pageSize: ps,
								displayInfo: true,
								displayMsg: 'Rows {0} - {1} de {2}',
								emptyMsg: "No hay registros disponibles"
						}),        
			tbar: [ 'Buscar: ', ' ',
				new Ext.app.SearchField({
					store: store,
					params: {start: 0, limit: ps},
					emptyText: '<Enter your search string>'
				}),
				new Ext.Toolbar.Button({
					text: 'Add',
					icon:'/static/ext/resources/images/default/dd/drop-add.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						//Window
						var ns_store = new Ext.data.SimpleStore({ 
						   fields: ['value', 'name'], 
						   data : <% js_dumper( [ ['/', 'General' ] ] ) %>
						}); 
						var bl_store = new Ext.data.SimpleStore({ 
						   fields: ['value', 'name'], 
						   data : <% js_dumper( [ ['*', _loc('All') ] ] ) %>
						}); 
						var new_cal = new Ext.FormPanel({
							url: '/job/calendar_update',
							frame: true,
							labelWidth: 150, 
							defaults: { width: 250 },
							buttons: [
								{  text: '<% _loc('OK') %>',
									handler: function(){ 
										var ff = new_cal.getForm();
										ff.submit({
											success: function(form, action) { win.close(); },
											failure: function(form, action) { Ext.Msg.alert("Failure", action.result.msg); }
										});
									}
								},
								{  text: '<% _loc('Cancel') %>' , handler: function(){  win.close() } }
							],
							items: [
								{  xtype: 'hidden', name: 'action', value: 'create' },
								{  xtype: 'textfield', name: 'name', fieldLabel: '<% _loc('Calendar Name') %>' }, 
								{  xtype: 'textarea', name: 'description', fieldLabel: '<% _loc('Description') %>' }, 
								{  xtype: 'combo', 
										   name: 'ns', 
										   hiddenName: 'ns',
										   fieldLabel: '<% _loc('Namespace') %>', 
										   mode: 'local', 
										   editable: false,
										   forceSelection: true,
										   triggerAction: 'all',
										   store: ns_store, 
										   valueField: 'value',
										   displayField:'name', 
										   allowBlank: false,
								},
								{  xtype: 'combo', 
										   name: 'bl', 
										   hiddenName: 'bl',
										   fieldLabel: '<% _loc('Baseline') %>',
										   mode: 'local', 
										   editable: false,
										   forceSelection: true,
										   triggerAction: 'all',
										   store: bl_store, 
										   valueField: 'value',
										   displayField:'name', 
										   allowBlank: false
								}
							]
						});
						var win = new Ext.Window({
							layout: 'fit',
							height: 250, width: 450,
							title: 'Edit Window',
							items: new_cal
						});
						win.show();
					}
				}),
				new Ext.Toolbar.Button({
					text: 'Edit',
					icon:'/static/ext/resources/images/default/dd/drop-yes.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = grid.getSelectionModel();
						if (sm.hasSelection())
						{
							var sel = sm.getSelected();
							Baseliner.addNewTabComp('/job/calendar?id_cal=' + sel.data.id , '<% _loc('Calendar') %>');
						} else {
							Ext.Msg.alert('Error', 'Falta seleccionar una fila');	
						};
						
					}
				}),
				new Ext.Toolbar.Button({
					text: 'Delete',
					icon:'/static/ext/resources/images/default/dd/del.gif',
					cls: 'x-btn-text-icon',
					handler: function() {
						var sm = grid.getSelectionModel();
						var sel = sm.getSelected();
						Ext.Msg.confirm('Confirmation', 'Are you sure you want to delete the calendar ' + sel.data.name + '?', 
							function(btn){ 
								if(btn=='yes') {
									var conn = new Ext.data.Connection();
									conn.request({
										url: '/job/calendar_update',
										params: { action: 'delete', id_cal: sel.data.id },
										success: function(resp,opt) { grid.getStore().remove(sel); },
										failure: function(resp,opt) { Ext.Msg.alert('Error', 'Could not delete the calendar.'); }
									});	
								}
							} );
					}
				}),
				'->'
				]
		});

		grid.on("rowdblclick", function(grid, rowIndex, e ) {
			var r = grid.getStore().getAt(rowIndex);
			Baseliner.addNewTabComp('/job/calendar?id_cal=' + r.get('id') , '<% _loc('Calendar') %>');
		});		

		Ext.getCmp('main-panel').setActiveTab( Ext.getCmp('main-panel').add(grid) ) ;
		
	return grid;
})();

