{
  json: {
   //Function used within json which must be there in order to use designer to desgin
   "scope.!on" : Ext.emptyFn,
   "scope.!setConfig" : Ext.emptyFn,
   "scope.!getConfig" : Ext.emptyFn,
   "scope.!getCode"   : Ext.emptyFn,
   "scope.!undo" : Ext.emptyFn,
   "scope.!redo" : Ext.emptyFn,
   "scope.!refresh" : Ext.emptyFn,
   "scope.!setPropertyGrid" : Ext.emptyFn,
   "scope.!removeElement" : Ext.emptyFn,
   "scope.!selectElement" : Ext.emptyFn,
   "scope.!appendConfig" : Ext.emptyFn,
   "scope.!visualResize" : Ext.emptyFn,
   "scope.!findByJsonId" : Ext.emptyFn,
   "scope.!fireEvent"   : Ext.emptyFn,
   "scope.!errorHandler": Ext.emptyFn,
   "scope.!repository" : false,

   //From here on normal code stuff
   "scope.!RepositoryId" : Ext.id(),
   "scope.!ErrorId"    : Ext.id(),
   "scope.!TabId"      : Ext.id(),
   "scope.!enableCopy" : true,
   "scope.!enableCopy" : true,
   "scope.!enableShow" : true,
   "scope.!enableEdit" : true,
   "scope.!enableVersion" : true
  },
  xtype:"treepanel",
  border : false,
  id   : scope.RepositoryId,
  animate:true,
  autoScroll:true,
  containerScroll:true,
  rootVisible : false,
  root:new Ext.tree.AsyncTreeNode({text:'root'}),
  loader:new Ext.ux.guid.tree.RepositoryLoader(scope.repository),
  saveAs: function(){
     Ext.Msg.prompt('Filename', 'Please enter full file name:', function(btn, text){
       if (btn == 'ok'){
        var t = text.replace(/\\/g,'/').split('/');
        text = '';
        for (var i=0;i<t.length;i++) { if (t[i]) text += (text ? '/' : '') + t[i]}
        scope.repository.save(text,scope.getCode(),function(success){
         if (!success) {
           Ext.Msg.alert('Error','Failed to save file ' + text);
         } else {
           scope.isModified(false);
         }
         if (typeof callback == "function") callback(success);
        });
        this.reload();
       }
     },this,false,scope.repository.last);

  },
  reload : function(){
    this.root.reload(function(){
     var node = this.loader.activeNode;
     if (node) {
       this.expandPath(node.getPath());
       node.select();
     }
    }.createDelegate(this));
  },
  tbar:[{
    tooltip : 'Save the design, reusing last name',
    iconCls:'icon-save',
    handler: function(){
      if (scope.repository.last) {
        scope.repository.save(scope.repository.last,scope.getCode(),function(success){
         if (!success) {
           Ext.Msg.alert('Error','Failed to save file ' + scope.repository.last);
         } else {
          scope.isModified(true);
         }
        });
      } else {
        Ext.getCmp(scope.RepositoryId).saveAs();
      }
    }
  },{
    tooltip : 'Save the design with different name',
    iconCls:'icon-saveas',
    handler : function(){
       Ext.getCmp(scope.RepositoryId).saveAs();
    }
  },'-',{
    iconCls:'icon-reload',
    tooltip : 'Reload the design from file',
    handler : function(){
      if (scope.repository.last) {
        scope.repository.open(scope.repository.last,function(success,result){
          if (success){
            scope.setConfig(result);
          } else {
            Ext.Msg.alert('Error','Failed to reload file ' + scope.repository.last);
          }
         });
      } else {
        Ext.Msg.alert('Error','No file selected');
      }
    }
  },'-',{
    tooltip : 'Refresh files',
    iconCls:'icon-filerefresh',
    handler: function (){
       Ext.getCmp(scope.RepositoryId).reload();
    }
  }],
  disabled : scope.repository == null,
  enableDrag: true,
  dragConfig:{
    getDragData : function(e){
      var data = Ext.dd.Registry.getHandleFromEvent(e);
      if (data && data.node.leaf) {
       var url = scope.repository.getUrl(data.node.attributes.id);
       if (e.shiftKey || !url) { //Append mode
           data.config=function(callback){
            scope.repository.open(this.id,function(success,result){
              if (success) {
                callback(result);
              } else {
                Ext.Msg.alert('Error','Could not load file ' + this.id);
             }
            }.createDelegate(this));
         }.createDelegate(data.node.attributes);
       } else { //Insert jsonPanel
         data.config=function(callback){
           callback({ xtype : "jsonpanel",
                      autoLoad : url,
                      __JSON__scope : "scope"
                    });
         }.createDelegate(data.node.attributes);
       }
       data.processed=false;
       return data;
      }
      return;
    },
    ddGroup: 'designerddgroup'
  },
  listeners :  {
    'dblclick' : function(node,e){
       e.preventDefault();
       if (node.leaf) {
         scope.repository.open(node.id,function(success,result){
           if (success) {
             scope.setConfig(result);
             this.reload();
           } else {
             Ext.Msg.alert('Error','Could not load file ' + node.id);
           }
         }.createDelegate(this));
       }
     },
    'render': function() {
        //Create context menu
        var contextMenu = new Ext.menu.Menu({items:[{
          text    : 'Open',
          tooltip : 'Open file',
          iconCls : 'icon-reload',
          scope   : this,
          handler : function(item,e) {
              scope.repository.open(contextMenu.node.id,function(success,result){
                if (success) {
                  scope.setConfig(result);
                  Ext.getCmp(scope.RepositoryId).reload();
                } else {
                  Ext.Msg.alert('Error','Could not load file ' + contextMenu.node.id);
                }
              });
            }
        },{
          text    : 'Rename',
          tooltip : 'Rename the file',
          iconCls : 'icon-filerename',
          scope   : this,
          handler : function(item,e) {
             Ext.Msg.prompt('Filename', 'Please enter new full filename:', function(btn, text){
               if (btn == 'ok'){
                var t = text.replace(/\\/g,'/').split('/');
                text = '';
                for (var i=0;i<t.length;i++) { if (t[i]) text += (text ? '/' : '') + t[i]}
                if (text && contextMenu.id != text ) {
                  scope.repository.rename(contextMenu.node.id,text,function(success,result){
                    if (success) {
                      scope.setConfig(result);
                    } else {
                      Ext.Msg.alert('Error','Failed to rename file ' + contextMenu.id);
                    }
                    Ext.getCmp(scope.RepositoryId).reload();
                  });
                } else {
                  Ext.Msg.alert('Error','File name not valid');
                }
               }
              },this,false,scope.repository.last);
            }
        },{
          text    : 'Delete',
          tooltip : 'Delete file',
          iconCls : 'icon-filedelete',
          scope   : this,
          handler : function(item,e) {
              scope.repository.remove(contextMenu.node.id,function(success){
                if (success) {
                  Ext.getCmp(scope.RepositoryId).reload();
                } else {
                  Ext.Msg.alert('Error','Failed to delete ' + contextMenu.node.id);
                }
              });
            }
        }]});
        this.on('contextmenu', function(node,e) {
             e.preventDefault();
             if (node.leaf) {
               contextMenu.node = node;
               contextMenu.showAt(e.getXY());
             }
        }, this);
    }
  }
}